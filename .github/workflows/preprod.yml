name: Deploy preprod

on:
  workflow_dispatch:
    inputs:
      envToRun:
        type: choice
        description: 'Env to run [ test | ci | preprod | prod ]'
        required: true
        default: preprod
        options:
          - test
          - ci
          - preprod
          - prod

jobs:

  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: ${{ inputs.envToRun }}
    env:
      CLUSTER_NAME: preprod-training-calendar
      SERVICE_NAME: preprod-training-calendar-frontend
      AWS_REGION: eu-north-1
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: react - Build, tag, and push image to Amazon ECR
        id: react-build-image
        env:
          REACT_ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REACT_ECR_REPOSITORY: training-calendar-frontend-preprod-nginx
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build \
          --build-arg REACT_APP_API_URL="${{ vars.REACT_APP_API_URL }}" \
          -t $REACT_ECR_REGISTRY/$REACT_ECR_REPOSITORY:$IMAGE_TAG \
          -f react.Dockerfile .
          docker tag  $REACT_ECR_REGISTRY/$REACT_ECR_REPOSITORY:$IMAGE_TAG $REACT_ECR_REGISTRY/$REACT_ECR_REPOSITORY:latest
          docker push $REACT_ECR_REGISTRY/$REACT_ECR_REPOSITORY --all-tags
          echo "image=$REACT_ECR_REGISTRY/$REACT_ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"

      - name: Download task definition
        env:
          TASK_DEFINITION: preprod-training-calendar-front
        run: |
          aws ecs describe-task-definition --task-definition $TASK_DEFINITION --query taskDefinition > task-definition.json

      - name: Fill in the new react image ID in the Amazon ECS task definition
        id: react-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: react
          image: ${{ steps.react-build-image.outputs.image }}

      - name: Deploy ECS task definition on the service $
        id: deploy-task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.react-task-def.outputs.task-definition }}
          cluster: ${{ env.CLUSTER_NAME }}
          service: ${{ env.SERVICE_NAME }}
          wait-for-service-stability: true

      - name: DEBUG - Check ECS deployment status
        run: |
          aws ecs describe-services --services ${{ env.SERVICE_NAME }} --cluster ${{ env.CLUSTER_NAME }} --query "services[0].deployments" > deployments.json
          cat deployments.json
  
      - name: Rollback detection
        id: rollback-detection
        env:
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
        run: |
          # Get task definition ARN from previous deployment step
          NEW_TASK_DEF_ARN="${{ steps.deploy-task.outputs.task-definition-arn }}"
      
          # Get current active task definition from ECS service
          CURRENT_TASK_DEF_ARN=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query 'services[0].taskDefinition' \
            --output text)
      
          echo "New Task ARN: $NEW_TASK_DEF_ARN"
          echo "Current Task ARN: $CURRENT_TASK_DEF_ARN"
      
          if [ "$NEW_TASK_DEF_ARN" != "$CURRENT_TASK_DEF_ARN" ]; then
            echo "::error::Rollback detected! Service reverted to previous task definition."
            exit 1
          else
            echo "Deployment successful - no rollback occurred"
          fi